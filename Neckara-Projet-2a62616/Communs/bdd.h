#ifndef BDD_H
#define BDD_H

//TODO regarder la licence de mysql

#include <mysql/mysql.h>
#include <iostream>
#include <vector>
#include <string>
#include <SFML/Graphics.hpp>
#include <sstream>


#include "Param.h"
#include "resultatrequete.h"
/*
Installer mysql :
aptitude install libmysqlclient15-dev
aptitude install mysql-server

Compiler :

g++ bdd.cpp -o exe -lmysqlclient
*/

namespace LD
{

    struct Resultat;

    /** @brief classe servant √  encapsuler l'acc√®s √  une Base de Donn√©es */
    class BDD
    {
        private :
                /** @brief liste des diff√©rentes Base de Donn√©es */
                static std::vector<BDD *> listeBDD;

                /** @brief mutex pour qu'on ne puisse avoir qu'un acc√®s par table √  la fois */
                static sf::Mutex verrou[BDD_PARAM::MAX];
        public :
                /** @brief permet d'envoyer une requ√™te √  la BDD et l'ouvre si elle ne l'est pas.
                  /!\ Peut renvoyer une exception (std::string)
                    @param int idBDD : identifiant de la table
                    @param const string & requete : requ√™te √  envoyer √  la Base de Donn√©e.
                    @return Resultat & : instance de la classe Resultat, contient le r√©sultat retourn√©e par la requ√™te */
                static Resultat & requeteBDD(BDD_PARAM::IdBDD idBDD, const std::string & requete);

                /** @brief Permet de fermer la connexion √  une table
                    @param BDD_PARAM::IdBDD idBDD : identifiant de la table √  fermer */
                static void closeBDD(BDD_PARAM::IdBDD idBDD);
                /** @brief Permet de fermer tous les connexions aux tables */
                static void closeAllBDD();

                /** @brief Prot√®ge la BDD contre les injections SQL, chaque donn√©e doit √™tre v√©rifi√©e avant d'√™tre int√©gr√©e √  une requ√™te SQL
                  @param std::string & cha√Æne : cha√Æne √  traiter
                   @return  std::string & : r√©f√©rence vers la chaine */
                static std::string & antiInjection(std::string & chaine);
    private :
            /** @brief Variable n√©cessaire pour l'utilisation d'une base de donn√©es mysql, lien d'une connexion √  une base de donn√©e */
                    MYSQL conn;
                    /** @brief Permet d'ouvrir une table
                        @param const char * adresse : adresse de la table
                        @param const char * login : login utilis√© pour se connecter √  la table
                        @param const char * password : mot de passe utilis√© pour se connecter √  la table
                        @param const char * table : table √  laquelle se connecter */
                    BDD(const char * adresse, const char * login, const char * password, const char * table);


                    /** @brief permet de fermer la table */
                    ~BDD();

                    /** @brief permet d'envoyer une requ√™te
                        @param const std::string & requete : requ√™te √  envoyer
                        @return MYSQL_RES * : r√©sultat de la requ√™te, NULL si erreur */
                    MYSQL_RES * requete(const std::string & requete);
    };

    /** @brief contient le r√©sultat de la requ√™te BDD.
        Lorsque requeteBDD renvois un Resultat, il est conseill√© de surcharger l'op√©rateur d'affectation de la classe courante afin de traiter directement le r√©sultat */

    struct Resultat
    {
      public :

            /** @brief Nombre de lignes */
            int nbLigne;
            /** @brief Nombre de colonne */
            int nbColonne;
            /** @brief r√©sultat de la requ√™te */
            LigneResultatRequete * resultat;

            /** @brief On peut acc√©der aux diff√©rentes lignes du r√©sultat de la requ√™te gr√¢ce √  l'op√©rateur [].
                   @param int i : num√©ro de la ligne (commence √  0)
                   @return const LigneResultatRequete & : ligne demand√©e */
            const LigneResultatRequete & operator[](int i) const;

            /** @brief construit un r√©sultat
                @param MYSQL_RES * resultat : r√©ponse de MySQL */
            Resultat(MYSQL_RES * resultat);

            /** @brief d√©truit le r√©sultat */
            ~Resultat();
    };

}
#endif // BDD_H
